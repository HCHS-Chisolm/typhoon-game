name: Deploy Preview

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

jobs:
  deploy_preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: main
          folder: .
          target-folder: preview/${{ github.event.pull_request.number }}
          clean: false

      - name: Add comment to PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            A preview deployment for this pull request is available at:
            https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/preview/${{ github.event.pull_request.number }}

  remove_preview:
    if: github.event_name == 'pull_request_closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Delete preview directory
        uses: actions/github-script@v7
        with:
          script: |
            const github = require('@actions/github');
            const core = require('@actions/core');

            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.event.repository.name }}';
            const ref = 'main'; // Replace with your GitHub Pages branch
            const pathToDelete = 'preview/${{ github.event.pull_request.number }}';

            const octokit = github.getOctokit(core.getInput('github-token', { required: true }));

            async function deleteDirectory(owner, repo, ref, pathToDelete) {
              try {
                const { data: refData } = await octokit.rest.git.getRef({
                  owner,
                  repo,
                  ref: `refs/heads/${ref}`,
                });

                const { data: commitData } = await octokit.rest.git.getCommit({
                  owner,
                  repo,
                  commit_sha: refData.object.sha,
                });

                const { data: treeData } = await octokit.rest.git.getTree({
                  owner,
                  repo,
                  tree_sha: commitData.tree.sha,
                  recursive: 'true',
                });

                const treeEntriesToDelete = treeData.tree
                  .filter(entry => entry.path.startsWith(pathToDelete))
                  .map(entry => ({
                    path: entry.path,
                    sha: null,
                    mode: entry.type === 'tree' ? '040000' : '100644',
                    type: entry.type,
                  }));

                if (treeEntriesToDelete.length === 0) {
                  console.log(`No files or directories found to delete under path: ${pathToDelete}`);
                  return;
                }

                const { data: newTreeData } = await octokit.rest.git.createTree({
                  owner,
                  repo,
                  tree: treeData.tree.filter(entry => !entry.path.startsWith(pathToDelete)),
                  base_tree: commitData.tree.sha,
                });

                const { data: newCommitData } = await octokit.rest.git.createCommit({
                  owner,
                  repo,
                  message: `Remove preview deployment for PR #${{ github.event.pull_request.number }}`,
                  tree: newTreeData.sha,
                  parents: [commitData.sha],
                });

                await octokit.rest.git.updateRef({
                  owner,
                  repo,
                  ref: `refs/heads/${ref}`,
                  sha: newCommitData.sha,
                });

                console.log(`Successfully deleted directory: ${pathToDelete}`);
              } catch (error) {
                core.setFailed(`Failed to delete directory: ${error.message}`);
              }
            }

            await deleteDirectory(owner, repo, ref, pathToDelete);
          github-token: ${{ secrets.GITHUB_TOKEN }}
